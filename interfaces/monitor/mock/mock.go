// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	monitor "github.com/go-masonry/mortar/interfaces/monitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Gauge mocks base method
func (m *MockMetrics) Gauge(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge
func (mr *MockMetricsMockRecorder) Gauge(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockMetrics)(nil).Gauge), ctx, name, value)
}

// Count mocks base method
func (m *MockMetrics) Count(ctx context.Context, name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockMetricsMockRecorder) Count(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMetrics)(nil).Count), ctx, name, value)
}

// Histogram mocks base method
func (m *MockMetrics) Histogram(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Histogram indicates an expected call of Histogram
func (mr *MockMetricsMockRecorder) Histogram(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockMetrics)(nil).Histogram), ctx, name, value)
}

// Distribution mocks base method
func (m *MockMetrics) Distribution(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distribution", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distribution indicates an expected call of Distribution
func (mr *MockMetricsMockRecorder) Distribution(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distribution", reflect.TypeOf((*MockMetrics)(nil).Distribution), ctx, name, value)
}

// Decr mocks base method
func (m *MockMetrics) Decr(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decr indicates an expected call of Decr
func (mr *MockMetricsMockRecorder) Decr(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockMetrics)(nil).Decr), ctx, name)
}

// Incr mocks base method
func (m *MockMetrics) Incr(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr
func (mr *MockMetricsMockRecorder) Incr(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockMetrics)(nil).Incr), ctx, name)
}

// Set mocks base method
func (m *MockMetrics) Set(ctx context.Context, name, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockMetricsMockRecorder) Set(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetrics)(nil).Set), ctx, name, value)
}

// Timing mocks base method
func (m *MockMetrics) Timing(ctx context.Context, name string, value time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timing", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Timing indicates an expected call of Timing
func (mr *MockMetricsMockRecorder) Timing(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockMetrics)(nil).Timing), ctx, name, value)
}

// AddTag mocks base method
func (m *MockMetrics) AddTag(name, value string) monitor.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", name, value)
	ret0, _ := ret[0].(monitor.Metrics)
	return ret0
}

// AddTag indicates an expected call of AddTag
func (mr *MockMetricsMockRecorder) AddTag(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockMetrics)(nil).AddTag), name, value)
}

// SetRate mocks base method
func (m *MockMetrics) SetRate(rate float64) monitor.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRate", rate)
	ret0, _ := ret[0].(monitor.Metrics)
	return ret0
}

// SetRate indicates an expected call of SetRate
func (mr *MockMetricsMockRecorder) SetRate(rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRate", reflect.TypeOf((*MockMetrics)(nil).SetRate), rate)
}

// Implementation mocks base method
func (m *MockMetrics) Implementation() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Implementation")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Implementation indicates an expected call of Implementation
func (mr *MockMetricsMockRecorder) Implementation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Implementation", reflect.TypeOf((*MockMetrics)(nil).Implementation))
}

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockReporter) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockReporterMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockReporter)(nil).Connect), ctx)
}

// Close mocks base method
func (m *MockReporter) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockReporterMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReporter)(nil).Close), ctx)
}

// Metrics mocks base method
func (m *MockReporter) Metrics() monitor.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(monitor.Metrics)
	return ret0
}

// Metrics indicates an expected call of Metrics
func (mr *MockReporterMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockReporter)(nil).Metrics))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// SetAddress mocks base method
func (m *MockBuilder) SetAddress(hostPort string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddress", hostPort)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetAddress indicates an expected call of SetAddress
func (mr *MockBuilderMockRecorder) SetAddress(hostPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockBuilder)(nil).SetAddress), hostPort)
}

// SetPrefix mocks base method
func (m *MockBuilder) SetPrefix(prefix string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrefix", prefix)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetPrefix indicates an expected call of SetPrefix
func (mr *MockBuilderMockRecorder) SetPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockBuilder)(nil).SetPrefix), prefix)
}

// SetTags mocks base method
func (m *MockBuilder) SetTags(tags map[string]string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTags", tags)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetTags indicates an expected call of SetTags
func (mr *MockBuilderMockRecorder) SetTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockBuilder)(nil).SetTags), tags)
}

// AddContextExtractors mocks base method
func (m *MockBuilder) AddContextExtractors(extractors ...monitor.ContextExtractor) monitor.Builder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range extractors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContextExtractors", varargs...)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// AddContextExtractors indicates an expected call of AddContextExtractors
func (mr *MockBuilderMockRecorder) AddContextExtractors(extractors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContextExtractors", reflect.TypeOf((*MockBuilder)(nil).AddContextExtractors), extractors...)
}

// Build mocks base method
func (m *MockBuilder) Build() monitor.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(monitor.Reporter)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build))
}
